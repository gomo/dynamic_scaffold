<% if elem.needs_rendering?(self)%>
  <% if !elem.label? && elem.type?(:hidden_field) %>
    <%= elem.render(self, form) %>
  <% else %>
    <%- errors = elem.errors(form) -%>
    <div class="<%= class_names('form-group', 'has-error': errors.present?) %>">
      <label><%= elem.proxy_field.label %></label>
      <div class="clearfix">
        <%- elem.insert(:before).each do |block| -%>
          <%= self.instance_exec(@record, &block) %>
        <%-end-%>
        <% if elem.type? :collection_check_boxes %>
          <%= elem.render(self, form) do |cb|%>
            <div class="form-check checkbox">
              <%= cb.label class: 'form-check-label' do%>
                <%= cb.check_box class: 'form-check-input' %> <%= cb.text %> 
              <%end%>
            </div>
          <%end%>
        <% elsif elem.type? :collection_radio_buttons %>
          <%= elem.render(self, form) do |cb|%>
            <div class="form-check radio">
              <%= cb.label class: 'form-check-label' do%>
                <%= cb.radio_button class: 'form-check-input' %> <%= cb.text %> 
              <%end%>
            </div>
          <%end%>
        <% elsif elem.type? :carrierwave_image %>
          <%- image = form.object.public_send(elem.name) -%>
          <div class="js-ds-image-wrapper">
            <div class="js-ds-image-preview panel panel-default card mb-1">
              <% if elem.options[:removable] %>
              <div class="text-right panel-heading card-header">
                <button type="button" class="btn btn-outline-danger btn-danger btn-sm js-ds-image-remove">
                  <%= dynamic_scaffold_icon :times %>
                </button>
              </div>
              <% end %>
              <div class="panel-body card-body">
                <%- if elem.cropper.present? -%>
                  <%= form.hidden_field "cropper_#{elem.name}", class: "js-ds-image-cropper", data:{options: elem.cropper.to_json} %>
                  <div class="text-right" style="height: 24px;">
                    <span class="js-ds-image-cropper-display badge badge-primary"></span>
                  </div>
                <%- end -%>
                <div style="overflow: hidden;<%= elem.preview_image_style %>">
                  <img src="<%= image.url if image.file.present? %>" alt="" class="img-responsive img-fluid">
                </div>
              </div>
            </div>
            <%= form.hidden_field "remove_#{elem.name}", value: "1", disabled:"disabled", class: 'js-ds-image-remove-flag' if elem.options[:removable]%>
            <%= elem.render(self, form, 'form-control-file js-ds-image') do |attr|%>
              <%= form.file_field(elem.name, attr) %>
            <%end%>
            <%= form.hidden_field "#{elem.name}_cache" %>
          </div>
        <% elsif elem.type? :globalize_fields %>
          <% elem.locales.each do |locale, name| %>
            <%- locale_errors = elem.locale_errors(locale, form) -%>
            <%= form.globalize_fields_for(locale) do |gform|%>
              <div class="<%= class_names('ds-globalize-group', 'has-error': locale_errors.present?) %>">
                <%= tag.span(elem.lang_attributes('ds-globalize-lang')) do%>
                  <%= name %>
                <%end%>
                <%= elem.render(self, gform, class_names('form-control', {'is-invalid': locale_errors.present?})) %>
              </div>
              <%= render_form_errors(locale_errors) -%>
            <%end%>
          <% end %>
        <% elsif elem.type? :cocoon %>
          <%= form.fields_for elem.name do |child_form| %>
            <%= render 'dynamic_scaffold/bootstrap/form/cocoon', f: child_form, items: elem.form.items %>
          <% end %>
          <%= link_to_add_association "Add #{elem.proxy_field.label}", form, elem.name, class: 'btn btn-outline-secondary btn-sm', partial: 'dynamic_scaffold/bootstrap/form/cocoon', render_options: { locals: { items: elem.form.items } } %>
        <% else %>
          <%= elem.render(self, form, class_names('form-control', {'is-invalid': errors.present?})) %>
        <% end %>
        <%- elem.insert(:after).each do |block| -%>
          <%= self.instance_exec(@record, &block) %>
        <%-end-%>
      </div>
      <%= render_form_errors(errors) -%>
      <%if elem.notes?%>
        <div class="form-text text-muted"><%= elem.render_notes(form.object, self) %></div>
      <%end%>
    </div>
  <% end %>
<% end %>